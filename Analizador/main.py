from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import re
import random

app = FastAPI()

# Permitir CORS desde frontend local
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

class Codigo(BaseModel):
    code: str

# Diccionario de mensajes variados por tipo de estructura
MENSAJES_VARIADOS = {
    "for": [
        "Se detect√≥ un ciclo 'for'. Revisa si puede convertirse en una comprensi√≥n de listas.",
        "Encontraste un bucle 'for'. A veces es posible optimizarlo usando funciones como map o list comprehensions.",
        "El ciclo 'for' es √∫til, pero considera si puedes usar una estructura m√°s concisa como una expresi√≥n generadora.",
    ],
    "while": [
        "Se identific√≥ un ciclo 'while'. Verifica que su condici√≥n tenga una salida clara para evitar bucles infinitos.",
        "Cuidado con los ciclos 'while': aseg√∫rate de que la condici√≥n eventualmente se vuelva falsa.",
        "Un 'while' est√° presente en tu c√≥digo. Revisa que no se repita indefinidamente sin control.",
    ],
    "if": [
        "Se encontr√≥ una condici√≥n 'if'. Aseg√∫rate de cubrir todos los casos necesarios, incluso los no previstos.",
        "Tu c√≥digo contiene una estructura 'if'. Eval√∫a si podr√≠as simplificarla o dividirla en funciones.",
        "La instrucci√≥n 'if' ayuda a tomar decisiones. Verifica que todas las condiciones est√©n bien definidas.",
    ],
    "try": [
        "Detectamos un bloque 'try'. Es recomendable capturar solo las excepciones necesarias.",
        "Est√°s usando manejo de errores con 'try'. Intenta no usar 'except' gen√©rico para evitar esconder errores graves.",
        "Un bloque 'try' fue encontrado. Recuerda siempre manejar adecuadamente los posibles errores esperados.",
    ]
}

def analizar_codigo(code: str):
    estructuras = []
    correccion = code
    explicaciones = []

    # Detectar estructura 'for' simple
    for_matches = re.findall(r"for (\w+) in (.+?):\n +(.+)", code)
    if for_matches:
        estructuras.append("for")
        for var, iterable, body in for_matches:
            body = body.strip()
            patron_acumulacion = re.match(rf"(\w+)\.append\({var}\)", body)
            if patron_acumulacion:
                lista = patron_acumulacion.group(1)
                nueva_linea = f"{lista} = list({iterable})"
                correccion = correccion.replace(f"for {var} in {iterable}:", "# Reemplazado autom√°ticamente")
                correccion = correccion.replace(f"    {body}", nueva_linea)
                explicaciones.append("Se reemplaz√≥ un bucle 'for' simple por una expresi√≥n 'list()' para mayor legibilidad y eficiencia.")
            else:
                explicaciones.append(random.choice(MENSAJES_VARIADOS["for"]))

    # while
    if 'while' in code:
        estructuras.append("while")
        explicaciones.append(random.choice(MENSAJES_VARIADOS["while"]))

    # if
    if 'if' in code:
        estructuras.append("if")
        explicaciones.append(random.choice(MENSAJES_VARIADOS["if"]))

    # try
    if 'try:' in code:
        estructuras.append("try")
        explicaciones.append(random.choice(MENSAJES_VARIADOS["try"]))

    resumen = ""
    if estructuras:
        resumen += "üîç Se encontraron las siguientes estructuras de control:\n"
        for e in estructuras:
            resumen += f"‚Ä¢ {e.capitalize()}\n"
        resumen += "\n"
    else:
        resumen += "‚úÖ No se detectaron estructuras de control espec√≠ficas.\n"

    explicacion = resumen + "\n" + "\n".join(explicaciones)

    mensajes = []
    for exp in explicaciones:
        mensajes.append({"tipo": "sugerencia", "mensaje": exp})
    if resumen:
        mensajes.insert(0, {"tipo": "sugerencia", "mensaje": resumen})

    # Si no hubo correcci√≥n, agrega un mensaje empresarial y espec√≠fico
    if correccion == code:
        if "for" in estructuras:
            mensajes.append({
                "tipo": "sugerencia",
                "mensaje": "No se requiere correcci√≥n. El uso del bucle 'for' en su c√≥digo es adecuado y sigue buenas pr√°cticas de legibilidad y eficiencia."
            })
        elif "while" in estructuras:
            mensajes.append({
                "tipo": "sugerencia",
                "mensaje": "No se requiere correcci√≥n. El ciclo 'while' est√° correctamente implementado y cumple con los est√°ndares de control de flujo."
            })
        elif "if" in estructuras:
            mensajes.append({
                "tipo": "sugerencia",
                "mensaje": "No se requiere correcci√≥n. La estructura condicional 'if' est√° bien utilizada y mejora la claridad del c√≥digo."
            })
        elif "try" in estructuras:
            mensajes.append({
                "tipo": "sugerencia",
                "mensaje": "No se requiere correcci√≥n. El bloque 'try' demuestra un manejo adecuado de excepciones."
            })
        else:
            mensajes.append({
                "tipo": "sugerencia",
                "mensaje": "No se requiere correcci√≥n. Su c√≥digo cumple con las buenas pr√°cticas y no se detectaron mejoras necesarias."
            })

    return {
        "explicacion": mensajes,
        "correccion": correccion if correccion != code else ""
    }

@app.post("/analizar")
async def analizar(request: Request, codigo: Codigo):
    resultado = analizar_codigo(codigo.code)
    return resultado
